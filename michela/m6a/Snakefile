configfile: "config.yaml"

raw_read_pattern= config['dirs']['reads'] + "m6A_{sample}_R2_001.fastq.gz"
samples = config['samples']

# kallisto settings
kallisto_abundance_suffix = 'abundance.h5'
kallisto_output_dir = config['dirs']['data_out'] + '/kallisto_quant/{sample}/' 
kallisto_quant_output = kallisto_output_dir + kallisto_abundance_suffix

# star settings
star_suffix = 'Aligned.sortedByCoord.out.bam'
star_output_dir = config['dirs']['data_out'] + '/mapping'
star_output_prefix = star_output_dir + '/{sample}.'
star_output = star_output_prefix + star_suffix
star_err_file = star_output_prefix + 'stderr.txt'
indexed_bam_output = star_output + '.bai'

# esat settings
esat_suffixes = ['window.txt', 'gene.txt']
esat_output_dir = config['dirs']['data_out'] + '/esat'
esat_output_prefix = esat_output_dir + '/{sample}'
esat_output = [esat_output_prefix + '.' + suffix for suffix in esat_suffixes]


fastqc_suffixes = ['.zip', '.html']
fastqc_output_dir = 'fastqc'
fastqc_output = [fastqc_output_dir + '/m6A_{sample}_R2_001_fastqc' + suffix for suffix in fastqc_suffixes]

subworkflow load_shared:
	workdir:
		"../../shared"
	snakefile:
		"../../shared/Snakefile"
	configfile:
		"../../shared/config.yaml"

rule all:
	input:
		expand(kallisto_quant_output, sample=samples),
		expand(esat_output, sample=samples),
		expand(fastqc_output, sample=samples),
		expand('data/bigwig/raw/{sample}.bw', sample=samples),
		expand('data/bigwig/normalised/{sample}.{strand}.bw', sample=samples, strand=['forward', 'reverse'])

rule kallisto_quant:
	input:
		index= load_shared('indices/dm6/kallisto/kallisto.index'),
		reads= raw_read_pattern
	output:
		kallisto_quant_output
	params:
		output_dir= kallisto_output_dir
	threads: 8
	shell:
		"kallisto quant -i {input.index} -o {params.output_dir} --single --single-overhang --fr-stranded -l 400.0 -s 200.0 -t 8 {input.reads}"

rule map_with_star:
	input:
		reads= raw_read_pattern,
		index= load_shared('indices/dm6/STAR')
	output:
		star_output
	threads: 8
	params:
		mapping_dir= star_output_dir,
		out_prefix= star_output_prefix,
		err_file= star_err_file
	shell:
		"""
		mkdir -p {params.mapping_dir}

		STAR    --runThreadN {threads} \
				--outFileNamePrefix {params.out_prefix} \
				--runMode alignReads \
				--genomeDir {input.index} \
				--readFilesIn {input.reads} \
				--readFilesCommand zcat \
				--outSAMtype BAM SortedByCoordinate	2>{params.err_file}
		"""

rule create_indexed_bam_file:
	input:
		star_output
	output:
		indexed_bam_output
	shell:
		"""
		samtools index {input} {output}
		"""

rule run_esat:
	input:
		star_output
	output:
		esat_output
	params:
		annotation= load_shared('annotations/gene2transcript.txt'),
		out_prefix= esat_output_prefix 
	shell:
		"""
		mkdir -p data/esat

		esat 	-in {input} \
				-geneMapping {params.annotation} \
				-out {params.out_prefix} \
				-task score3p
		"""
		
rule create_fastqc:
	input:
		raw_read_pattern,
	output:
		fastqc_output
	params:
		fastqc_dir= fastqc_output_dir
	threads: 8
	shell:
		"""
		mkdir -p {params.fastqc_dir}

		fastqc -t {threads} -o {params.fastqc_dir} {input}
		"""

rule create_bedgraph:
	input:
		star_output
	output:
		temp('{sample}.bedGraph')
	shell:
		"""
		bedtools genomecov -ibam {input} -bga -split > {output}
		"""

rule sort_bedgraph:
	input:
		'{sample}.bedGraph'
	output:
		temp('{sample}.sorted.bedGraph')
	shell:
		'LC_COLLATE=C sort -k1,1 -k2,2n {input} > {output}'

rule create_bigwig:
	input:
		chrom_sizes= load_shared('chrom_sizes/dm6.chrom.sizes'),
		bedgraph= '{sample}.sorted.bedGraph'
	output:
		'data/bigwig/raw/{sample}.bw'
	shell:
		"""
		mkdir -p data/bigwig
		bedGraphToBigWig {input.bedgraph} {input.chrom_sizes} {output}
		"""

rule create_normalised_bigwig:
	input:
		mapped_reads=star_output,
		index=indexed_bam_output
	output:
		'data/bigwig/normalised/{sample}.{strand}.bw'
	shell:
		"""
		bamCoverage --bam {input.mapped_reads} -o {output} \
			--normalizeUsing RPKM \
			--binSize 5 \
			--filterRNAstrand {wildcards.strand} 
		"""
